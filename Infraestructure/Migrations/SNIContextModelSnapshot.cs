// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SNI_Events.Infraestructure.Context;

#nullable disable

namespace SNI_Events.Migrations
{
    [DbContext(typeof(SNIContext))]
    partial class SNIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SNI_Events.Domain.Entities.Dinner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdCreated")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdDeleted")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdModified")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Dinners");
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdCreated")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdDeleted")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdModified")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.ScheduledEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DinnerId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdCreated")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdDeleted")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdModified")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DinnerId");

                    b.HasIndex("EventId");

                    b.ToTable("ScheduledEvent");
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdCreated")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdDeleted")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdModified")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.UserDinner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("DinnerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdCreated")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdDeleted")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdModified")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DinnerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDinners", (string)null);
                });

            modelBuilder.Entity("ScheduledEventUser", b =>
                {
                    b.Property<long>("ScheduledEventsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduledEventsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ScheduledEventUser");
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.ScheduledEvent", b =>
                {
                    b.HasOne("SNI_Events.Domain.Entities.Dinner", "Dinner")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("DinnerId");

                    b.HasOne("SNI_Events.Domain.Entities.Event", "Event")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dinner");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.UserDinner", b =>
                {
                    b.HasOne("SNI_Events.Domain.Entities.Dinner", "Dinner")
                        .WithMany("UserDinners")
                        .HasForeignKey("DinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNI_Events.Domain.Entities.User", "User")
                        .WithMany("UserDinners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dinner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScheduledEventUser", b =>
                {
                    b.HasOne("SNI_Events.Domain.Entities.ScheduledEvent", null)
                        .WithMany()
                        .HasForeignKey("ScheduledEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNI_Events.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.Dinner", b =>
                {
                    b.Navigation("ScheduledEvents");

                    b.Navigation("UserDinners");
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.Event", b =>
                {
                    b.Navigation("ScheduledEvents");
                });

            modelBuilder.Entity("SNI_Events.Domain.Entities.User", b =>
                {
                    b.Navigation("UserDinners");
                });
#pragma warning restore 612, 618
        }
    }
}
